{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newTweet","current","value","tempTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadTweets","alert","map","tweet","index","Tweet","ActionBtn","action","setLikes","userLike","setUserLike","classname","actionDisplay","display","class","onClick","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","StrictMode","tweetsEl"],"mappings":"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","file":"static/js/main.7c9444f1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, {useState, useEffect} from 'react';\nimport {loadTweets} from '../lookup';\n\nexport function TweetsComponent(props) {\n    const textAreaRef = React.createRef()\n    const [newTweets, setNewTweets] = useState([])\n\n    const handleSubmit = event => {\n        event.preventDefault()\n        //console.log(event)\n       // console.log(textAreaRef.current.value) \n        const newTweet = textAreaRef.current.value\n        const tempTweets = [...newTweets]\n        tempTweets.unshift({\n          content: newTweet,\n          likes: 0,\n          id: 12312\n        })\n        setNewTweets(tempTweets)\n        textAreaRef.current.value = ''\n\n    }\n    return (\n  <div className={props.className}>\n\n      <div className='col-12 mb-3'>   \n        <form onSubmit={handleSubmit}>\n            <textarea ref={textAreaRef} required={true} className='form form-control' name='tweet'>\n\n            </textarea>\n            <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n        </form>\n      </div> \n      <TweetsList newTweets={newTweets}/>\n    </div>\n    )\n}\n\nexport function TweetsList(props) {\n        const [tweetsInit, setTweetsInit] = useState(props.newTweets ? props.newTweets : [])\n        const [tweets, setTweets] = useState([])\n        useEffect(() => { \n          const final = [...props.newTweets].concat(tweetsInit)\n          if (final.length !== tweets.length) {\n            setTweets(final)\n          }\n          \n\n        },[props.newTweets, tweetsInit, tweets])\n        useEffect(() => {\n          const myCallBack = (response, status) => {\n            \n            if (status === 200) {\n              const final = [...response].concat(tweetsInit)\n              setTweetsInit(final)\n            } else {\n              alert(\"There was an error\")\n            }\n          }\n          loadTweets(myCallBack)\n        }, [tweetsInit])\n        return tweets.map((tweet, index)=>{\n          return <Tweet className={\"my-5 py-5 border bg-white text-dark\"} tweet={tweet} key={`${index}-{tweet.id}`} />\n          })\n      }\n\nexport function ActionBtn(props){\n    const {tweet, action} = props\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [userLike, setUserLike] = useState(false)\n    const classname = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n\n    const handleClick = event => {\n        event.preventDefault()\n        if (action.type === 'like') {\n            if (userLike) {\n                setLikes(likes - 1)\n                setUserLike(false)\n            } else{\n                setLikes(tweet.likes + 1)\n                setUserLike(true)\n            }\n                   \n        }\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return <button class={classname} onClick={handleClick}> {display}  </button> \n  }\n  \n  \nexport function Tweet(props) {\n   const {tweet} = props\n   const classname = props.className ? props.className : \"col-10 mx-auto col-md-6\"\n    return <div className={classname}>\n      <p>{tweet.id} - {tweet.content}</p>\n      <div className='btn btn-group'>\n          <ActionBtn tweet={tweet} action={{type: 'like', display: 'Likes'}}/>\n          <ActionBtn tweet={tweet} action={{type: 'unlike', display: 'Unlike'}}/>\n          <ActionBtn tweet={tweet} action={{type: 'retweet', display: 'Retweet'}}/>\n      </div>\n    </div>\n  }\n  ","export function loadTweets  (callback)  {   \n    const xhr = new XMLHttpRequest()\n    const method = 'GET'\n    const url = \"http://localhost:8000/api/tweet\"\n    const responseType = \"json\"\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function() {   \n  \n      callback(xhr.response, xhr.status)\n      \n    }\n    xhr.onerror = (e) =>{\n      console.log(e)\n      callback({\"message\": \"There was an error\"},400)\n    }\n  \n    xhr.send()\n    }\n\n\n","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { TweetsComponent} from './tweets'\n\n\nfunction App() {\n  \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <div>\n        <TweetsComponent />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {TweetsComponent} from './tweets';\n\nconst appEl = document.getElementById('root')\nif (appEl){\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEl\n  );\n}\nconst tweetsEl = document.getElementById('tweetme-web')\n\nif (tweetsEl){\n  ReactDOM.render(\n    <React.StrictMode>\n      <TweetsComponent />\n    </React.StrictMode>,\n    tweetsEl\n  );\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}